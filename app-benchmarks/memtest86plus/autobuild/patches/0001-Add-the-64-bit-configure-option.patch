From ea792b926702ca59017b85caa9e4d8b99092eeac Mon Sep 17 00:00:00 2001
From: Chao Li <lichao@loongson.cn>
Date: Tue, 11 Jun 2024 19:11:53 +0800
Subject: [PATCH 01/43] Add the 64-bit configure option

Added a new option to control whether the code built in 64-bit mode.

Signed-off-by: Chao Li <lichao@loongson.cn>
---
 app/test.h          |  4 +++-
 boot/boot.h         |  6 ++++++
 boot/efi.h          |  5 +++--
 boot/efisetup.c     | 10 +++++-----
 system/acpi.c       |  6 +++---
 system/hwctrl.c     |  2 +-
 system/screen.c     |  2 +-
 system/smbios.c     |  4 ++--
 system/usbhcd.c     |  3 ++-
 tests/own_addr.c    |  4 +++-
 tests/test_helper.h |  6 ++++--
 11 files changed, 33 insertions(+), 19 deletions(-)

diff --git a/app/test.h b/app/test.h
index a81bfae..a3d4120 100644
--- a/app/test.h
+++ b/app/test.h
@@ -13,6 +13,8 @@
 #include <stdbool.h>
 #include <stdint.h>
 
+#include "boot.h"
+
 #include "pmem.h"
 #include "smp.h"
 
@@ -47,7 +49,7 @@ extern barrier_t *run_barrier;
  */
 extern spinlock_t *error_mutex;
 
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
 /**
  * The word width (in bits) used for memory testing.
  */
diff --git a/boot/boot.h b/boot/boot.h
index 9a65aef..16dadaa 100644
--- a/boot/boot.h
+++ b/boot/boot.h
@@ -58,6 +58,12 @@
 #define E820_TYPE	16		/* offsetof(e820_entry.type) */
 #define E820_ENTRY_SIZE 20		/* sizeof(e820_entry) */
 
+/* Define the 64bit and 32bit macro */
+
+#if defined(__x86_64__)
+#define CONFIG_64BIT
+#endif
+
 #ifndef __ASSEMBLY__
 
 #include <stdint.h>
diff --git a/boot/efi.h b/boot/efi.h
index 048f9fc..1340fa3 100644
--- a/boot/efi.h
+++ b/boot/efi.h
@@ -12,8 +12,9 @@
  */
 
 #include <stdint.h>
+#include "boot.h"
 
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
 #define NATIVE_MSB              UINT64_C(0x8000000000000000)
 #else
 #define NATIVE_MSB              0x80000000
@@ -71,7 +72,7 @@
 
 #define efiapi __attribute__((ms_abi))
 
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
 typedef uint64_t        uintn_t;
 #else
 typedef uint32_t        uintn_t;
diff --git a/boot/efisetup.c b/boot/efisetup.c
index 7e0a510..8e8da71 100644
--- a/boot/efisetup.c
+++ b/boot/efisetup.c
@@ -142,7 +142,7 @@ static void test_frame_buffer(screen_info_t *si)
     pixel_value.word = (r_value << si->red_pos) | (g_value << si->green_pos) | (b_value << si->blue_pos);
 
     uintptr_t lfb_base = si->lfb_base;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     if (LFB_CAPABILITY_64BIT_BASE & si->capabilities) {
         lfb_base |= (uintptr_t)si->ext_lfb_base << 32;
     }
@@ -374,7 +374,7 @@ static efi_status_t set_screen_info_from_gop(screen_info_t *si, efi_handle_t *ha
     si->lfb_width  = best_info.h_resolution;
     si->lfb_height = best_info.v_resolution;
     si->lfb_base   = lfb_base;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     if (lfb_base >> 32) {
         si->capabilities |= LFB_CAPABILITY_64BIT_BASE;
         si->ext_lfb_base = lfb_base >> 32;
@@ -552,7 +552,7 @@ static efi_status_t set_efi_info_and_exit_boot_services(efi_handle_t handle, boo
         goto fail;
     }
 
-#ifdef __x86_64
+#ifdef CONFIG_64BIT
     boot_params->efi_info.loader_signature  = EFI64_LOADER_SIGNATURE;
 #else
     boot_params->efi_info.loader_signature  = EFI32_LOADER_SIGNATURE;
@@ -562,7 +562,7 @@ static efi_status_t set_efi_info_and_exit_boot_services(efi_handle_t handle, boo
     boot_params->efi_info.mem_desc_version  = mem_desc_version;
     boot_params->efi_info.mem_map           = (uintptr_t)mem_map;
     boot_params->efi_info.mem_map_size      = mem_map_size;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     boot_params->efi_info.sys_tab_hi        = (uintptr_t)sys_table >> 32;
     boot_params->efi_info.mem_map_hi        = (uintptr_t)mem_map   >> 32;
 #endif
@@ -574,7 +574,7 @@ fail:
 static void set_e820_map(boot_params_t *params)
 {
     uintptr_t mem_map_addr = params->efi_info.mem_map;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     mem_map_addr |= (uintptr_t)params->efi_info.mem_map_hi << 32;
 #endif
     size_t mem_map_size  = params->efi_info.mem_map_size;
diff --git a/system/acpi.c b/system/acpi.c
index b441ddb..0e3e8b1 100644
--- a/system/acpi.c
+++ b/system/acpi.c
@@ -112,7 +112,7 @@ static rsdp_t *scan_for_rsdp(uintptr_t addr, int length)
     return NULL;
 }
 
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
 static rsdp_t *find_rsdp_in_efi64_system_table(efi64_system_table_t *system_table)
 {
     efi64_config_table_t *config_tables = (efi64_config_table_t *)map_region(system_table->config_tables,
@@ -162,7 +162,7 @@ static uintptr_t find_rsdp(void)
 
     // Search for the RSDP
     rsdp_t *rp = NULL;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     if (efi_info->loader_signature == EFI64_LOADER_SIGNATURE) {
         uintptr_t system_table_addr = (uintptr_t)efi_info->sys_tab_hi << 32 | (uintptr_t)efi_info->sys_tab;
         system_table_addr = map_region(system_table_addr, sizeof(efi64_system_table_t), true);
@@ -291,7 +291,7 @@ static bool parse_fadt(uintptr_t fadt_addr)
     acpi_config.pm_addr  = *(uint32_t *)(fadt_addr+FADT_PM_TMR_BLK_OFFSET);
     acpi_config.pm_is_io = true;
 
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     acpi_gen_addr_struct *rt;
 
     // Get APIC Timer Address
diff --git a/system/hwctrl.c b/system/hwctrl.c
index 945df87..76767b3 100644
--- a/system/hwctrl.c
+++ b/system/hwctrl.c
@@ -33,7 +33,7 @@ static efi_runtime_services_t   *efi_rs_table = NULL;
 void hwctrl_init(void)
 {
     boot_params_t *boot_params = (boot_params_t *)boot_params_addr;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     if (boot_params->efi_info.loader_signature == EFI64_LOADER_SIGNATURE) {
         uintptr_t system_table_addr = (uintptr_t)boot_params->efi_info.sys_tab_hi << 32 | boot_params->efi_info.sys_tab;
         if (system_table_addr != 0) {
diff --git a/system/screen.c b/system/screen.c
index b745f16..49f7ed7 100644
--- a/system/screen.c
+++ b/system/screen.c
@@ -188,7 +188,7 @@ void screen_init(void)
         }
 
         lfb_base = screen_info->lfb_base;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
         if (LFB_CAPABILITY_64BIT_BASE & screen_info->capabilities) {
             lfb_base |= (uintptr_t)screen_info->ext_lfb_base << 32;
         }
diff --git a/system/smbios.c b/system/smbios.c
index 5b5d5b1..630d72c 100644
--- a/system/smbios.c
+++ b/system/smbios.c
@@ -42,7 +42,7 @@ static char *get_tstruct_string(struct tstruct_header *header, uint16_t maxlen,
     return NULL;
 }
 
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
 static smbiosv2_t *find_smbiosv2_in_efi64_system_table(efi64_system_table_t *system_table)
 {
     efi64_config_table_t *config_tables = (efi64_config_table_t *) map_region(system_table->config_tables, system_table->num_config_tables * sizeof(efi64_config_table_t), true);
@@ -90,7 +90,7 @@ static uintptr_t find_smbiosv2_adr(void)
             }
         }
     }
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     if (rp == NULL && efi_info -> loader_signature == EFI64_LOADER_SIGNATURE) {
         // EFI64
         if (rp == NULL && efi_info->loader_signature == EFI64_LOADER_SIGNATURE) {
diff --git a/system/usbhcd.c b/system/usbhcd.c
index 5824eb1..439bcbb 100644
--- a/system/usbhcd.c
+++ b/system/usbhcd.c
@@ -7,6 +7,7 @@
 #include "screen.h"
 #include "usb.h"
 #include "vmem.h"
+#include "boot.h"
 
 #include "ehci.h"
 #include "ohci.h"
@@ -424,7 +425,7 @@ static void reset_usb_controller(hci_info_t *hci)
     uintptr_t mmio_size = pci_config_read32(bus, dev, func, bar);
     pci_config_write32(bus, dev, func, bar, base_addr);
     bool in_io_space = base_addr & 0x1;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     if (!in_io_space && (base_addr & 0x4)) {
         base_addr += (uintptr_t)pci_config_read32(bus, dev, func, bar + 4) << 32;
         pci_config_write32(bus, dev, func, bar + 4, 0xffffffff);
diff --git a/tests/own_addr.c b/tests/own_addr.c
index 249cf74..029c91f 100644
--- a/tests/own_addr.c
+++ b/tests/own_addr.c
@@ -18,6 +18,8 @@
 
 #include "vmem.h"
 
+#include "boot.h"
+
 #include "display.h"
 #include "error.h"
 #include "test.h"
@@ -136,7 +138,7 @@ int test_own_addr2(int my_cpu, int stage)
     // Calculate the offset (in pages) between the virtual address and the physical address.
     offset = (vm_map[0].pm_base_addr / VM_WINDOW_SIZE) * VM_WINDOW_SIZE;
     offset = (offset >= VM_PINNED_SIZE) ? offset - VM_PINNED_SIZE : 0;
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     // Convert to a byte address offset. This will translate the virtual address into a physical address.
     offset *= PAGE_SIZE;
 #else
diff --git a/tests/test_helper.h b/tests/test_helper.h
index 25a49f1..8bf663a 100644
--- a/tests/test_helper.h
+++ b/tests/test_helper.h
@@ -16,10 +16,12 @@
 
 #include "test.h"
 
+#include "boot.h"
+
 /**
  * Test word atomic read and write functions.
  */
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
 #include "memrw64.h"
 #define read_word   read64
 #define write_word  write64
@@ -69,7 +71,7 @@ static inline uintptr_t round_up(uintptr_t value, size_t align_size)
 static inline testword_t prsg(testword_t state)
 {
     // This uses the algorithms described at https://en.wikipedia.org/wiki/Xorshift
-#ifdef __x86_64__
+#ifdef CONFIG_64BIT
     state ^= state << 13;
     state ^= state >> 7;
     state ^= state << 17;
-- 
2.43.4

