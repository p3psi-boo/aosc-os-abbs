From dfe98c121f9cc61cbace56be7e4386335f2bbcc4 Mon Sep 17 00:00:00 2001
From: Chao Li <lichao@loongson.cn>
Date: Wed, 12 Jun 2024 17:44:13 +0800
Subject: [PATCH 28/43] system: Add the way to access PCI memory space via MMIO

Some uniformly address ARCHs access the PCI memory depended the MMIO, so
the method to access PCI memory via MMIO is added.

Signed-off-by: Chao Li <lichao@loongson.cn>
---
 system/pci_mmio.c | 127 ++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 127 insertions(+)
 create mode 100644 system/pci_mmio.c

diff --git a/system/pci_mmio.c b/system/pci_mmio.c
new file mode 100644
index 0000000..29fa8f1
--- /dev/null
+++ b/system/pci_mmio.c
@@ -0,0 +1,127 @@
+// SPDX-License-Identifier: GPL-2.0
+
+#include <stdbool.h>
+#include <stdint.h>
+
+#include "boot.h"
+#include "bootparams.h"
+
+#include "cpuid.h"
+#include "io.h"
+
+#include "mmio.h"
+
+#include "pci.h"
+#include "unistd.h"
+
+//------------------------------------------------------------------------------
+// Constants
+//------------------------------------------------------------------------------
+
+#define NB_PCI_MMIO_TYPE0_BASE 0x0EFE00000000
+#define NB_PCI_MMIO_TYPE1_BASE 0x0EFE10000000
+
+//------------------------------------------------------------------------------
+// Public Functions
+//------------------------------------------------------------------------------
+
+void pci_init(void)
+{
+    return;
+}
+
+uint64_t pci_config_type0_addr(int bus, int dev, int func, int reg)
+{
+    uint64_t addr = NB_PCI_MMIO_TYPE0_BASE
+                  | (reg  & 0xf00) << 16
+                  | (bus  & 0xff)  << 16
+                  | (dev  & 0x1f)  << 11
+                  | (func & 0x07)  << 8
+                  | (reg  & 0xff);
+    return (addr);
+}
+
+uint64_t pci_config_type1_addr(int bus, int dev, int func, int reg)
+{
+    uint64_t addr = NB_PCI_MMIO_TYPE1_BASE
+                  | (reg  & 0xf00) << 16
+                  | (bus  & 0xff)  << 16
+                  | (dev  & 0x1f)  << 11
+                  | (func & 0x07)  << 8
+                  | (reg  & 0xff);
+    return (addr);
+}
+
+uint8_t pci_config_read8(int bus, int dev, int func, int reg)
+{
+    if (bus == 0) {
+        return mmio_read8((uint8_t *)pci_config_type0_addr(bus, dev, func, reg));
+    } else {
+        return mmio_read8((uint8_t *)pci_config_type1_addr(bus, dev, func, reg));
+    }
+}
+
+uint16_t pci_config_read16(int bus, int dev, int func, int reg)
+{
+    if (bus == 0) {
+        return mmio_read16((uint16_t *)pci_config_type0_addr(bus, dev, func, reg));
+    } else {
+        return mmio_read16((uint16_t *)pci_config_type1_addr(bus, dev, func, reg));
+    }
+}
+
+uint32_t pci_config_read32(int bus, int dev, int func, int reg)
+{
+    if (bus == 0) {
+        return mmio_read32((uint32_t *)pci_config_type0_addr(bus, dev, func, reg));
+    } else {
+        return mmio_read32((uint32_t *)pci_config_type1_addr(bus, dev, func, reg));
+    }
+}
+
+void pci_config_write8(int bus, int dev, int func, int reg, uint8_t value)
+{
+    if (bus == 0) {
+        mmio_write8((uint8_t *)pci_config_type0_addr(bus, dev, func, reg), value);
+    } else {
+        mmio_write8((uint8_t *)pci_config_type1_addr(bus, dev, func, reg), value);
+    }
+}
+
+void pci_config_write16(int bus, int dev, int func, int reg, uint16_t value)
+{
+    if (bus == 0) {
+        mmio_write16((uint16_t *)pci_config_type0_addr(bus, dev, func, reg), value);
+    } else {
+        mmio_write16((uint16_t *)pci_config_type1_addr(bus, dev, func, reg), value);
+    }
+}
+
+void pci_config_write32(int bus, int dev, int func, int reg, uint32_t value)
+{
+    if (bus == 0) {
+        mmio_write32((uint32_t *)pci_config_type0_addr(bus, dev, func, reg), value);
+    } else {
+        mmio_write32((uint32_t *)pci_config_type1_addr(bus, dev, func, reg), value);
+    }
+}
+
+
+// -------------
+// LPC Functions
+// -------------
+
+void lpc_outb(uint8_t cmd, uint8_t data)
+{
+    outb(cmd, 0x2E);
+    usleep(100);
+    outb(data, 0x2F);
+    usleep(100);
+}
+
+uint8_t lpc_inb(uint8_t reg)
+{
+    outb(reg, 0x2E);
+    usleep(100);
+    return inb(0x2F);
+}
-- 
2.43.4

