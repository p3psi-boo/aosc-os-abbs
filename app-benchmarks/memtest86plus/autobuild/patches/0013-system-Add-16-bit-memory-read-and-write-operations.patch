From 95b65c0e060b111f3c82d52c6b792886e907ece4 Mon Sep 17 00:00:00 2001
From: Chao Li <lichao@loongson.cn>
Date: Tue, 11 Jun 2024 20:26:25 +0800
Subject: [PATCH 13/43] system: Add 16-bit memory read and write operations

Added X64, I386 and LoongArch64 16-bit memory read and wirte operations.

Signed-off-by: Chao Li <lichao@loongson.cn>
---
 system/memrw16.h | 93 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 93 insertions(+)
 create mode 100644 system/memrw16.h

diff --git a/system/memrw16.h b/system/memrw16.h
new file mode 100644
index 0000000..236fcce
--- /dev/null
+++ b/system/memrw16.h
@@ -0,0 +1,93 @@
+// SPDX-License-Identifier: GPL-2.0
+#ifndef MEMRW16_H
+#define MEMRW16_H
+/**
+ * \file
+ *
+ * Provides some 16-bit memory access functions. These stop the compiler
+ * optimizing accesses which need to be ordered and atomic. Mostly used
+ * for accessing memory-mapped hardware registers.
+ *
+ *//*
+ * Copyright (C) 2021-2022 Martin Whitaker.
+ */
+
+#include <stdint.h>
+
+/**
+ * Reads and returns the value stored in the 16-bit memory location pointed
+ * to by ptr.
+ */
+static inline uint16_t read16(const volatile uint16_t *ptr)
+{
+    uint16_t val;
+#if defined(__i386__) || defined(__x86_64__)
+    __asm__ __volatile__(
+        "movw %1, %0"
+        : "=r" (val)
+        : "m" (*ptr)
+        : "memory"
+    );
+#elif defined(__loongarch_lp64)
+    __asm__ __volatile__(
+        "ld.h %0, %1"
+        : "=r" (val)
+        : "m" (*ptr)
+        : "memory"
+    );
+#endif
+    return val;
+}
+
+/**
+ * Writes val to the 16-bit memory location pointed to by ptr.
+ */
+static inline void write16(const volatile uint16_t *ptr, uint16_t val)
+{
+#if defined(__i386__) || defined(__x86_64__)
+    __asm__ __volatile__(
+        "movw %1, %0"
+        :
+        : "m" (*ptr),
+          "r" (val)
+        : "memory"
+    );
+#elif defined(__loongarch_lp64)
+    __asm__ __volatile__(
+        "st.h %1, %0"
+        :
+        : "m" (*ptr),
+          "r" (val)
+        : "memory"
+    );
+#endif
+}
+
+/**
+ * Writes val to the 16-bit memory location pointed to by ptr. Reads it
+ * back (and discards it) to ensure the write is complete.
+ */
+static inline void flush16(const volatile uint16_t *ptr, uint16_t val)
+{
+#if defined(__i386__) || defined(__x86_64__)
+    __asm__ __volatile__(
+        "movw %1, %0\n"
+        "movw %0, %1"
+        :
+        : "m" (*ptr),
+          "r" (val)
+        : "memory"
+    );
+#elif defined(__loongarch_lp64)
+    __asm__ __volatile__(
+        "st.h %1, %0\n"
+        "ld.h %1, %0"
+        :
+        : "m" (*ptr),
+          "r" (val)
+        : "memory"
+    );
+#endif
+}
+
+#endif // MEMRW16_H
-- 
2.43.4

