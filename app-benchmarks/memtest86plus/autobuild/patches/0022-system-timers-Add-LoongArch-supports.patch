From 9f88244b8efe408591b2ad4b98ea65396c98b625 Mon Sep 17 00:00:00 2001
From: Chao Li <lichao@loongson.cn>
Date: Wed, 12 Jun 2024 16:08:27 +0800
Subject: [PATCH 22/43] system/timers: Add LoongArch supports

In LoongArch, there is a stable counter that is independent of other
clocks, it like the TSC in x64. Using it to count the ticks per
millisecond.

Signed-off-by: Chao Li <lichao@loongson.cn>
---
 system/timers.c | 33 +++++++++++++++++++++++++++++++++
 1 file changed, 33 insertions(+)

diff --git a/system/timers.c b/system/timers.c
index f78d39a..cc7112a 100644
--- a/system/timers.c
+++ b/system/timers.c
@@ -12,6 +12,11 @@
 #include "io.h"
 #include "tsc.h"
 
+#if defined(__loongarch_lp64)
+// LoongArch GCC builtin function
+#include <larchintrin.h>
+#endif
+
 //------------------------------------------------------------------------------
 // Constants
 //------------------------------------------------------------------------------
@@ -23,6 +28,7 @@
 // Private Functions
 //------------------------------------------------------------------------------
 
+#if defined(__i386__) || defined(__x86_64__)
 static void correct_tsc(void)
 {
     uint32_t start_time, end_time, run_time, counter;
@@ -85,6 +91,33 @@ static void correct_tsc(void)
        clks_per_msec = run_time / 50;
     }
 }
+#elif defined(__loongarch_lp64)
+static void correct_tsc(void)
+{
+    uint64_t start, end, excepted_ticks, current_ticks, calc_base_freq, clock_multiplier, clock_divide;
+    uint64_t num_millisec = 50, millisec_div = 1000;
+
+    //
+    // Get stable count frequency
+    //
+    calc_base_freq   = __cpucfg(0x4);
+    clock_multiplier = __cpucfg(0x5) & 0xFFFF;
+    clock_divide     = (__cpucfg(0x5) >> 16) & 0xFFFF;
+
+    excepted_ticks = (((calc_base_freq * clock_multiplier) / clock_divide) * num_millisec) / millisec_div;
+
+    __asm__ __volatile__("rdtime.d %0, $zero":"=r"(current_ticks):);
+    excepted_ticks += current_ticks;
+
+    start = __csrrd_d(0x201);
+    do {
+      __asm__ __volatile__("rdtime.d %0, $zero":"=r"(current_ticks):);
+    } while (current_ticks < excepted_ticks);
+    end = __csrrd_d(0x201);
+
+    clks_per_msec = (end - start) / num_millisec;
+}
+#endif
 
 //------------------------------------------------------------------------------
 // Public Functions
-- 
2.43.4

