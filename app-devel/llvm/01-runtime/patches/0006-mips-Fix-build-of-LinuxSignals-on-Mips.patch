From 86289606d8edc4ba90de2192a4d4c4cf16341322 Mon Sep 17 00:00:00 2001
From: Henry Chen <henry.chen@oss.cipunited.com>
Date: Wed, 31 Jan 2024 14:37:12 +0800
Subject: [PATCH 6/9] [mips] Fix build of LinuxSignals on Mips

But only the build, not the functionality because lldb won't work
anyway.
---
 .../Plugins/Process/Utility/LinuxSignals.cpp  | 38 +++++++++++++++++--
 1 file changed, 34 insertions(+), 4 deletions(-)

diff --git a/lldb/source/Plugins/Process/Utility/LinuxSignals.cpp b/lldb/source/Plugins/Process/Utility/LinuxSignals.cpp
index 3f25dbc6abbb..d419bea22c4d 100644
--- a/lldb/source/Plugins/Process/Utility/LinuxSignals.cpp
+++ b/lldb/source/Plugins/Process/Utility/LinuxSignals.cpp
@@ -57,12 +57,14 @@ void LinuxSignals::Reset() {
 
   AddSignal(5,      "SIGTRAP",      true,     true,   true,   "trace trap (not reset when caught)");
   AddSignal(6,      "SIGABRT",      false,    true,   true,   "abort()/IOT trap", "SIGIOT");
-
+#if defined (__mips__)
+  AddSignal(7,      "SIGEMT",       false,    true,   true,   "emulator trap");
+#else
   AddSignal(7,      "SIGBUS",       false,    true,   true,   "bus error");
   ADD_SIGCODE(SIGBUS, 7, BUS_ADRALN, 1, "illegal alignment");
   ADD_SIGCODE(SIGBUS, 7, BUS_ADRERR, 2, "illegal address");
   ADD_SIGCODE(SIGBUS, 7, BUS_OBJERR, 3, "hardware error");
-
+#endif
   AddSignal(8,      "SIGFPE",       false,    true,   true,   "floating point exception");
   ADD_SIGCODE(SIGFPE, 8, FPE_INTDIV, 1, "integer divide by zero");
   ADD_SIGCODE(SIGFPE, 8, FPE_INTOVF, 2, "integer overflow");
@@ -74,8 +76,14 @@ void LinuxSignals::Reset() {
   ADD_SIGCODE(SIGFPE, 8, FPE_FLTSUB, 8, "subscript out of range");
 
   AddSignal(9,      "SIGKILL",      false,    true,   true,   "kill");
+#if defined (__mips__)
+  AddSignal(10,      "SIGBUS",       false,    true,   true,   "bus error");
+  ADD_SIGCODE(SIGBUS, 10, BUS_ADRALN, 1, "illegal alignment");
+  ADD_SIGCODE(SIGBUS, 10, BUS_ADRERR, 2, "illegal address");
+  ADD_SIGCODE(SIGBUS, 10, BUS_OBJERR, 3, "hardware error");
+#else
   AddSignal(10,     "SIGUSR1",      false,    true,   true,   "user defined signal 1");
-
+#endif
   AddSignal(11,     "SIGSEGV",      false,    true,   true,   "segmentation violation");
   ADD_SIGCODE(SIGSEGV, 11, SEGV_MAPERR,  1, "address not mapped to object", SignalCodePrintOption::Address);
   ADD_SIGCODE(SIGSEGV, 11, SEGV_ACCERR,  2, "invalid permissions for mapped object", SignalCodePrintOption::Address);
@@ -85,11 +93,32 @@ void LinuxSignals::Reset() {
   // Some platforms will occasionally send nonstandard spurious SI_KERNEL
   // codes. One way to get this is via unaligned SIMD loads. Treat it as invalid address.
   ADD_SIGCODE(SIGSEGV, 11, SI_KERNEL, 0x80, "invalid address", SignalCodePrintOption::Address);
-
+#if defined (__mips__)
+  AddSignal(12,     "SIGSYS",       false,    true,   true,   "invalid system call");
+#else
   AddSignal(12,     "SIGUSR2",      false,    true,   true,   "user defined signal 2");
+#endif
   AddSignal(13,     "SIGPIPE",      false,    true,   true,   "write to pipe with reading end closed");
   AddSignal(14,     "SIGALRM",      false,    false,  false,  "alarm");
   AddSignal(15,     "SIGTERM",      false,    true,   true,   "termination requested");
+#if defined (__mips__)
+  AddSignal(16,     "SIGUSR1",      false,    true,   true,   "user defined signal 1");
+  AddSignal(17,     "SIGUSR2",      false,    true,   true,   "user defined signal 2");
+  AddSignal(18,     "SIGCHLD",      false,    false,  true,   "child status has changed", "SIGCLD");
+  AddSignal(19,     "SIGPWR",       false,    true,   true,   "power failure");
+  AddSignal(20,     "SIGWINCH",     false,    true,   true,   "window size changes");
+  AddSignal(21,     "SIGURG",       false,    true,   true,   "urgent data on socket");
+  AddSignal(22,     "SIGIO",        false,    true,   true,   "input/output ready/Pollable event", "SIGPOLL");
+  AddSignal(23,     "SIGSTOP",      true,     true,   true,   "process stop");
+  AddSignal(24,     "SIGTSTP",      false,    true,   true,   "tty stop");
+  AddSignal(25,     "SIGCONT",      false,    false,  true,   "process continue");
+  AddSignal(26,     "SIGTTIN",      false,    true,   true,   "background tty read");
+  AddSignal(27,     "SIGTTOU",      false,    true,   true,   "background tty write");
+  AddSignal(28,     "SIGVTALRM",    false,    true,   true,   "virtual time alarm");
+  AddSignal(29,     "SIGPROF",      false,    false,  false,  "profiling time alarm");
+  AddSignal(30,     "SIGXCPU",      false,    true,   true,   "CPU resource exceeded");
+  AddSignal(31,     "SIGXFSZ",      false,    true,   true,   "file size limit exceeded");
+#else
   AddSignal(16,     "SIGSTKFLT",    false,    true,   true,   "stack fault");
   AddSignal(17,     "SIGCHLD",      false,    false,  true,   "child status has changed", "SIGCLD");
   AddSignal(18,     "SIGCONT",      false,    false,  true,   "process continue");
@@ -106,6 +135,7 @@ void LinuxSignals::Reset() {
   AddSignal(29,     "SIGIO",        false,    true,   true,   "input/output ready/Pollable event", "SIGPOLL");
   AddSignal(30,     "SIGPWR",       false,    true,   true,   "power failure");
   AddSignal(31,     "SIGSYS",       false,    true,   true,   "invalid system call");
+#endif
   AddSignal(32,     "SIG32",        false,    false,  false,  "threading library internal signal 1");
   AddSignal(33,     "SIG33",        false,    false,  false,  "threading library internal signal 2");
   AddSignal(34,     "SIGRTMIN",     false,    false,  false,  "real time signal 0");
-- 
2.45.1

